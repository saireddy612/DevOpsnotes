*Importance of Container Orchestration:
It does so many tasks , some of them
1. provisioning and deployment of container among the virtual machinces is not automated, if we want to distribute 100s of 
containers among VM's, it is very difficult to deploy manually. Hence, Container Orchestration tool make it easier to control 
over it.
2. Scaling up & down, removing container in order to spread the application load evenly.
3. It can controll the movement of containers from one VM's to another VM's due to lack of resources in the VM.

Container Orchestration solutions:
1.Docker Swarm
2.kubernetes
3.Openshift
4.Apache Mesos

platforms:
EKS: Elastic Kubernetes service
GKE: Google Kubernetes Engine
AKE: 

Container Orchestration Tools:                                                                    Orchetration=Management
1.Replicas
2.Distribution
3.Cluster mode
4.Scale up & down
5. High availability
6. Rolling update

Diff between Docker Swarm & Kubernetes:
|------------------------------------------------------------------|--------------------------------------------------------------|
|                    Docker                                        |                    Kubernetes                                |
|------------------------------------------------------------------|--------------------------------------------------------------|
|> It can Orchestrate docker container only, container runtim      |> It can Orchestrate containers of other tols also, It has se-|
|  is always docker                                                |perate container runtime interface and we will seee kubernetes|                           | 
|                                                                  |is always used with docker                                    |
|------------------------------------------------------------------|--------------------------------------------------------------|
|>Manager node and worker node(multiple manager is possi)          |> Master and worker node (only one master node)               |
|------------------------------------------------------------------|--------------------------------------------------------------|
|>Containers are scheduled on manager as well as working node      |> Containers are by default scheduled on worker node          |
|------------------------------------------------------------------|--------------------------------------------------------------|
|>RAFT algorithm is responsible to conduct the orchestration activi|>various objects and controllers are respon for orch activi   |
|------------------------------------------------------------------|--------------------------------------------------------------|
|>There is no auto scaling                                         |>supports auto scaling with help of Horizontal pod autoscaler |
|------------------------------------------------------------------|--------------------------------------------------------------|
|>Single Line Commands                                             |>we can write object definition/manifest files -YAML          |
|------------------------------------------------------------------|--------------------------------------------------------------|
|>There is no free dashboard to display the service objects        |>It has dashboard to display all its objects and its manifest |
|------------------------------------------------------------------|--------------------------------------------------------------|
|>In docker swarm, data of container sis preserved on vm itself    |>It can preserve data of container outside the cluster        |
|                                                                  | like PV:persistent volume, PVC: persistent volume claim      |
|------------------------------------------------------------------|--------------------------------------------------------------|

Docker tool:
It is basically tool which uses the dockerhub images and converts into the container in a single VM.
Kubernetes tool:
It uses the Docker for collecting the image and will create a container in multiple  VMs based upon the available resources on 
each VMs.
POD: its a smallest deployable unit in kubernetes. it is basically an abstract of container, In kubernetes we won't create container directly,
instead we look upon the POD. Multiple pods with same container is possible(ex: create a pods of nginx image). Each pod can have multiple
containers that dependent on each other.
NODE: VM's in the cluster where docker and kubernete is installed.
Replica: same pods with same container and image.

YAML:
>it is not a programming or scripting language.
>It is just a format to store data, like json, xml files
>It's very easy to read and write
>It's declarative in nature.
>Indentation(spacing) is important.
>In kubernetes the key is provided by the tool itself
>Value is written by user
>In the key we can have single value and multiple value.

Syntax:
key: value

YAML format to save single value:
trainer: Sai
training: devops
time: 8.30PM IST
day: weekday...............................[YAMLLINT its a website, where we can validate the yaml]

YAML format to save multiple values:
company: Edureka
trainer:           |go to next line and two spaces and write values)
  -Sonal
  -Ravi
  -John
  -Jaya
trainings:
  -Devops
  -AWS
  -AZURE
  -GCP
timings:
  -8.30PM
  
YAML format to save multiple values as a Map(key: value)
company: polo
Trainers:
  -name: Sonal
   phone: 75895
   email: 999898
  -name: Sai
   phone: slsls
   email: lslsl
tainings:
  -type: cloud
   name:
 
 YAML 
 > vim pod-definition.yml
 
 apiversion: v1 it is a pod library
 metadata: consist of label, names and all
 
> kubectl create -f pod-definition.yml.....f is file
> kubectl get pods
>kubectl get pods -o wide.......to get the schedule details
>kkubectl describe pod pod1 |less.....will describes the pod details


tommorow trouble shooting pod errors.
 
 
  
   











































